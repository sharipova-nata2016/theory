	Цель тестирования
Основная задача тестирования - чтобы конечный продукт соответствовал ожиданиям пользователя. Так же целью тестирования является проверка соответствия ПО предъявляемым требованиям, обеспечение уверенности в качестве ПО, поиск дефектов, которые должны быть выявлены до того, как их обнаружат пользователи программы.

	Для чего проводится тестирование ПО?
- Для проверки соответствия требованиям.
- Для обнаружения проблем на ранних этапах разработки и предотвращения повышения стоимости продукта.
	
	Принципы тестирования
Принцип 1 — Тестирование демонстрирует наличие дефектов, а не их отсутствие.
Тестирование снижает наличие дефектов, которые находятся в ПО, но не гарантирует их отсутствия.
Принцип 2 — Исчерпывающее тестирование невозможно.
Полное тестирование с использованием всех входных комбинаций и предусловий  невыполнимо (исключение — тривиальные случаи). Вместо попытки исчерпывающего тестирования используют анализ рисков и техники тест-дизайна, чтобы с минимальными усилиями покрыть как можно больше тестовых случаев.
Принцип 3 — Раннее тестирование.
Тестирование следует начинать на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше и исключить дорогостоящие изменения.
Принцип 4 — Скопление дефектов. Кластеризация. 
Большая часть дефектов сконцентрирована в небольшом количестве модулей.
Принцип 5 — Парадокс пестицида.
Если повторять одни и те же тестовые сценарии снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты.
Принцип 6 — Тестирование зависит от контекста.
Тестирование проводится по-разному в зависимости от природы программы. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, чем новостной портал.
Принцип 7 — Заблуждение об отсутствии ошибок. 
Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу.
Главное, что нахождение большого числа дефектов не гарантирует успех, важно, чтобы система была удобна пользователю и удовлетворяла его ожидания и потребности.

	Типы/виды тестирования
Для каждой задачи существует отдельный тип/вид тестирования. Принято разделять тестирование на виды по следующим категориям:

	1. Фукциональное (functional testing). 
Тип тестирования, с помощью которого проводят проверку, какие функции ПО реализованы и насколько верно они релизованы. (ЧТО должна делать система?)
Функциональное тестирование выполняется первым. Функциональные тесты могут проводиться на всех уровнях тестирования (компонентном, интеграционном, системном, приемочном). При этом, что делает ПО и какие задачи решает определяется функциональными требованиями, которые можно найти в спецификациях, бизнес-требованиях, user story, use case и т.п. 
Цель: Установить соответствие разработанного ПО исходным функциональным требованиям необходимым конечным пользователям. 

	2. Нефункциональное (non-functional testing). 
Тип тестирования, которое направлено на проверку нефункциональных требований. Например, удобство использования, производительность, безопасность. (КАК должна работать система?). Из-за большого количества нефункциональных характеристик выделяют под-типы тестирования:

	Тестирование производительности (Performance testing) 
Проверка скорости работы системы (время отклика, частота транзакций и др. зависящие от времени операции) в имитационной и реальной средах.
Цель: Установить реальную производительность программного продукта. 

	Нагрузочное тестирование (Load testing) 
Это те же тесты производительности, при которых система подвергается различным нагрузкам.
Цель: Убедиться в том, что система работает соответственно ожидаемым рабочим нагрузочным параметрам (какой предел работоспособности имеет система?).

	Тестирование масштабируемости (scalability testing)
Тестирование, которое измеряет производительность сети или системы, когда количество пользовательских запросов увеличивается или уменьшается.
Цель: Оценить способность ПО эффективно использовать доступные ресурсы для удовлетворения предъявляемых к нему требований.

	Объёмное тестирование (volume testing)
Тип тестирования, которое проводится для тестирования программного приложения с определенным объемом данных.
Цель: Оценка производительности системы при увеличении потока данных.

	Стрессовое тестирование (stress testing)
Тестирование направленное для проверки, как система обращается с нарастающей нагрузкой (количеством одновременных пользователей, при недостатке ресурсов дискового пространства, обрывов сети и т.д.). 
Цель: Проверка того, что система адекватно реагирует на те или иные стрессовые ситуации.

	Инсталляционное тестирование (installation testing)
Тестирование, направленное на проверку успешной установки, настройки, обновления или удаления приложения. Проверка правильности установки программного продукта является обязательным элементом проекта по тестированию любого продукта. 
Цель: Убедиться, что продукт может быть установлен/деинсталлирован при различных условиях – таких как: новая инсталляция, усовершенствование системы (upgrade), установка по умолчанию, полная установка, установка по выбору. 

	Тестирование интерфейса (GUI/UI testing)
Проверка требований к пользовательскому интерфейсу – экранов, кнопок и т.д. Большая часть функциональности ПО реализуется, как правило, через пользовательский интерфейс. 
Цель: Обнаружение дефектов в интерфейсе и поиск ошибок в функциональности посредством интерфейса.

	Тестирование удобства использования (usability testing)
Тестирование, направленное на установление степени удобства использования, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. Включает в себя тесты на человеческий фактор, эстетику интерфейса и его непротиворечивость, наличие и качество оперативной и контекстной помощи, руководств и учебных материалов. 
Цель: Удостовериться в том, что приложение удобно для использования его конечным пользователям. 

	Тестирование локализации (localization testing)
Проверка адаптации программного обеспечения для определенной аудитории в соответствии с ее культурными особенностями. То есть, переведен ли продукт на другой язык и корректно ли работает с учетом национальных особенностией страны или региона, в котором будет продаваться и использоваться.
Цель: Проверить, правильно ли локализован продукт.

	Тестирование безопасности (security testing)
Проверяем систему на предмет безопасной работы. Помогает провести анализ рисков связанных в организацией защиты программы от вирусов, взломщиков и др. неправомерных проникновений для получения/просмотра секретной информации.
Цель: Обеспечение безопасности данных пользователей. 

	Тестирование надёжности (reliability testing)
Проверка работоспособности приложения при длительном тестировании с ожидаемым уровнем нагрузки. 
Цель: Убедиться, что приложение работает, как и ожидалось, устойчиво к падениям и т.п. 

	3. Виды тестирования, которые связаны с изменениями:
	Дымовое (smoke testing)
Можно рассматривать в виде нескольких небольших тестов, которые выполняются для подтверждения того, что приложение нормально запускается и выполняет свои основные функции после сборки кода.
Выполняется перед регрессионным тестированием. Прогоняется каждый раз, когда мы получаем новый билд (версию) на тестирование, при этом считая её относительно нестабильной. Нам нужно убедиться что критически важные функции AUT (Application Under Test) работают согласно ожиданиям. 
Может выполняться автоматизированно или вручную. Тестируется чаще всего основная бизнес логика программы.
Цель: Выявить серьёзные проблемы как можно раньше, и отклонить этот билд (вернуть на доработку) на раннем этапе тестирования, чтобы не углубляться в долгие и сложные тесты, не затрачивая время на заведомо бракованное ПО. 
	
	Санитарное (sanity testing)
Выполняется после smoke-тестов перед регрессионным тестированием. Представляет собой разновидность регрессионного тестирования. Применяется с целью проверки работы какого-то фрагмента программы после внесения изменений в текущий или связанные модули.
Используется каждый раз, когда мы получаем относительно стабильный билд ПО, чтобы определить работоспособность в деталях. 
Чаще выполняется вручную. 
Цель: Проверить общее состояние системы в деталях, чтобы приступить к более тщательному тестированию. 

Оба эти вида тестирования нацелены на то, чтобы избежать потерь времени и усилий, чтобы быстрее определить недостатки ПО и их критичность, а так же то возможен ли переход в фазу более углублённого и тщательного тестирования.
	
	Регрессионное (regression testing)
Регерессионное тестирование - ключевой инструмент обеспечения качества.
Этот вид тестирования проверяет, что внесенные изменения не повлияли на работу функционала, разработанного ранее.
Повторное тестирование после внесения изменений в программное обеспечение или в его окружение (в новой версии приложения), чтобы убедиться в том, что функции, которые работали в предыдущей версии системы, по-прежнему работают так, как ожидалось, а найденные дефекты успешно исправлены (все протестированное ранее тестируется повторно).
Предпотителен автоматизированный вид тестирования, т.к. ручное может быть крайне затратным по ресурсам или времени.
Цель: Выявление потенциальных проблем, которые могли возникнуть в результате изменений. Проверка исправления найденных ранее дефектов. 